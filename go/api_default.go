/*
 * Todo app OAS
 *
 * OpenApi specification for a todo application
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

var todos []Todo
var domains = [1]string{"development"}

func CreateTodo(w http.ResponseWriter, r *http.Request) {
	todo, err := parseRequest(w, r)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	for _, domain := range domains {
		if todo.Responsibility == domain {
			todos = append(todos, *todo)
			w.Header().Set("Content-Type", "application/json; charset=UTF-8")
			w.WriteHeader(http.StatusOK)
		} else {
			w.Header().Set("Content-Type", "application/json; charset=UTF-8")
			w.WriteHeader(http.StatusForbidden)
		}
	}
}

func DeleteTodo(w http.ResponseWriter, r *http.Request) {
	todo, err := parseRequest(w, r)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	newTodos := []Todo{}

	for _, t := range todos {
		if t.Id != todo.Id {
			newTodos = append(newTodos, t)
			w.Header().Set("Content-Type", "application/json; charset=UTF-8")
			w.WriteHeader(http.StatusOK)
			return
		}
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusNotFound)
}

func GetTodos(w http.ResponseWriter, r *http.Request) {
	json.NewEncoder(w).Encode(todos)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func GetTodosWithStatus(w http.ResponseWriter, r *http.Request) {
	url := r.URL.Path

	url_split := strings.Split(url, "/")
	status := url_split[3]

	allTodosFromResponsibility := []Todo{}
	for _, t := range todos {
		if t.Responsibility == status {
			allTodosFromResponsibility = append(allTodosFromResponsibility, t)
		}
	}
	fmt.Println(allTodosFromResponsibility)
	json.NewEncoder(w).Encode(allTodosFromResponsibility)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UpdateTodo(w http.ResponseWriter, r *http.Request) {
	todo, err := parseRequest(w, r)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	for _, t := range todos {
		if t.Id == todo.Id {
			t.Title = todo.Title
			t.Description = todo.Description
			t.Assignee = todo.Assignee
			t.Status = todo.Status
			t.Priority = todo.Priority

			w.Header().Set("Content-Type", "application/json; charset=UTF-8")
			w.WriteHeader(http.StatusOK)
			return
		}
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusNotFound)
}

func parseRequest(w http.ResponseWriter, r *http.Request) (*Todo, error) {
	var todo Todo
	err := json.NewDecoder(r.Body).Decode(&todo)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return nil, err
	}
	return &todo, nil
}
